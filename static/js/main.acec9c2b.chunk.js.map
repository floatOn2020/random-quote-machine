{"version":3,"sources":["components/Quotebox.jsx","App.js","serviceWorker.js","index.js"],"names":["Quotebox","props","id","className","text","author","Button","variant","onClick","target","href","App","getQuote","fetch","then","response","json","data","console","log","setState","en","catch","err","state","this","style","minHeight","tweet","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uUAyBeA,EAnBE,SAACC,GAChB,OACE,yBAAKC,GAAG,YAAYC,UAAU,gBAC5B,6BACE,yBAAKD,GAAG,QAAQD,EAAMG,MACtB,yBAAKD,UAAU,OAAOD,GAAG,UAAS,wBAAIA,GAAG,UAAUD,EAAMI,UAE3D,yBAAKF,UAAU,IACb,kBAACG,EAAA,EAAD,CAAQJ,GAAG,YAAYC,UAAU,OAAOI,QAAQ,YAAYC,QAASP,EAAMO,SAA3E,aACA,uBAAGL,UAAU,iCACXM,OAAO,SACPC,KAAI,gDAA2CT,EAAMG,KAAjD,0BAAuEH,EAAMI,QAAUH,GAAG,eAC9F,uBAAGC,UAAU,kBAAb,kBC6BKQ,G,8DAvCb,WAAaV,GAAQ,IAAD,8BAClB,cAAMA,IAWRW,SAAW,WACTC,MAAM,8DAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACf,OAAQY,EAAKZ,SAC5B,EAAKe,SAAS,CAAChB,KAAMa,EAAKI,QAE3BC,OAAM,SAAAC,GACLL,QAAQC,IAAII,OArBd,EAAKC,MAAQ,CACXpB,KAAM,GACNC,OAAQ,IAJQ,E,gEASpBoB,KAAKb,a,+BAmBH,OACE,yBAAKT,UAAU,WAAWuB,MAAO,CAACC,UAAW,UAC3C,0BAAMxB,UAAU,aACd,wBAAIA,UAAU,IAAd,4BACA,kBAAC,EAAD,CAAUK,QAASiB,KAAKb,SAAUR,KAAMqB,KAAKD,MAAMpB,KAAMC,OAAQoB,KAAKD,MAAMnB,OAAQuB,MAAOH,KAAKD,MAAMI,c,GAjC9FC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.acec9c2b.chunk.js","sourcesContent":["import React from 'react'\nimport './Quotebox.scss';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\n\nconst Quotebox = (props) => {\n  return (\n    <div id=\"quote-box\" className=\"mx-auto p-3 \">\n      <div>\n        <div id='text'>{props.text}</div>\n        <div className='mt-2' id='author'><em id='author'>{props.author}</em></div>\n      </div>\n      <div className=''>\n        <Button id='new-quote' className='mt-5' variant=\"secondary\" onClick={props.onClick}>New quote</Button>\n        <a className=\"mt-5 btn btn-info tweet-button\"\n          target='_blank'\n          href={`https://twitter.com/intent/tweet?text=${props.text}.+ ++author:+ +${props.author}`} id='tweet-quote'>\n          <i className=\"fab fa-twitter\">tweet this</i>\n        </a>\n      </div>\n    </div>\n    );\n}\n\nexport default Quotebox;\n","import React, {Component} from 'react';\nimport Quotebox from './components/Quotebox';\nimport Container from 'react-bootstrap/Button';\nimport './App.scss';\nimport Media from 'react-media';\n\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      text: '',\n      author: ''\n    };\n  }\n\n componentDidMount(){\n  this.getQuote();\n }\n\n  getQuote = () => {\n    fetch(\"https://programming-quotes-api.herokuapp.com/quotes/random\")\n\n    .then(response => response.json())\n\n    .then(data => {\n      console.log(data)\n      this.setState({author: data.author})\n      this.setState({text: data.en})\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App pt-5\" style={{minHeight: '100vh'}}>\n        <main className=\"Container\" >\n          <h1 className=\"\">Random programmer quotes</h1>\n          <Quotebox onClick={this.getQuote} text={this.state.text} author={this.state.author} tweet={this.state.tweet}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}